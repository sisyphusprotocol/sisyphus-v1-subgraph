type User @entity {
  # user address
  id: ID!
  "same as id"
  address: String!
  canBeHost: Boolean!
  #
  campaignParticipated: [UserCampaign!]! @derivedFrom(field: "user")
}

type Campaign @entity {
  "save as campaign address"
  id: ID!
  "Campaign address"
  address: String!
  users: [UserCampaign!]! @derivedFrom(field: "campaign")

  uri: String!

  "when start"
  startTime: BigInt!
  "how long a period"
  periodLength: BigInt!
  "total Time"
  totalTime: BigInt!
  "How many epochs this campaign has"
  epochCount: BigInt!
  "When the campaign end"
  endTime: BigInt!

  "how many join the campaign"
  memberCount: BigInt!

  targetToken: Token!
  requiredAmount: BigInt!
  sharedReward: BigInt!
  "whether reward distribution is settled"
  settled: Boolean!
  successCount: BigInt!
}

type UserCampaign @entity {
  # user address + campaign contract address
  id: ID!
  tokenId: BigInt!
  user: User!
  campaign: Campaign!
  # whether is host
  isHost: Boolean!
  userStatus: UserStatus!
  failure: Boolean!

  #
  pendingReward: BigInt!
  pendingUserReward: BigInt!
  pendingHostReward: BigInt!

  #
  userRewardClaimed: Boolean!
  #
  userRewardClaimedAmount: BigInt

  #
  hostRewardClaimed: Boolean!
  hostRewardClaimedAmount: BigInt

  records: [Record!] @derivedFrom(field: "userCampaign")
}

type Token @entity {
  # token address
  id: ID!
  maxAmount: BigInt!
}

type Record @entity {
  # user address + campaign address +ã€€epoch number
  id: ID!
  epoch: BigInt!
  contentUri: String!
  timestamp: BigInt!
  userCampaign: UserCampaign!
}

type Challenge @entity {
  "user address + challenge id"
  id: ID!
  " challenge id"
  number: BigInt!
  campaign: Campaign!
  challenger: User!
  cheater: User!

  record: Record!
  agreeCount: BigInt!
  disagreeCount: BigInt!
  result: ChallengeResult!
}

type UserVote @entity {
  "user id - challenge id"
  id: ID!
  user: User!
  campaign: Campaign!
  challenge: Challenge!
  choice: Boolean
}

enum ChallengeResult {
  NotDecided
  VoteNotEnough
  Approved
  Failed
}

enum UserStatus {
  NotParticipate
  Signed
  Admitted
  Refused
  Success
  Failure
}
